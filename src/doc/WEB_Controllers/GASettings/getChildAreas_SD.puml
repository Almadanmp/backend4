@startuml
skinparam titleBorderRoundCorner 10
skinparam titleBorderThickness 3
skinparam titleBorderColor indianred
skinparam titleBackgroundColor snow
skinparam FontName quicksand

skinparam actor {
  BorderColor indianred
  backgroundColor Snow
  }

skinparam sequence {
  LifeLineBackgroundColor indianred
  ParticipantBackgroundColor snow
}

skinparam roundcorner 10

skinparam component {
  arrowThickness 1
  ArrowFontName Verdana
  ArrowColor indianred
  ArrowFontColor darkslategrey
}


title - Get Area Sensors -

autonumber

actor "Client"

"Client" -> "Web API": Select option Get Child Areas\non Table

activate "Web API"
"Web API" ->> ":SpringResolver":  GET "link.hrefs"
activate ":SpringResolver"
":SpringResolver" ->> ":GeoAreasWebController": getChildAreas(long geoAreaID) \n
deactivate ":SpringResolver"
activate ":GeoAreasWebController"
":GeoAreasWebController" -> ":GeographicAreaRepository": getDTOById(long geoAreaID)
activate ":GeographicAreaRepository"
":GeographicAreaRepository" --> ":GeoAreasWebController": return :GeographicAreaDTO
deactivate ":GeographicAreaRepository"
":GeoAreasWebController" -> ":GeographicAreaDTO": .getDaughterAreas()
activate ":GeographicAreaDTO"
":GeographicAreaDTO" --> ":GeoAreasWebController": return  :List<GeographicAreaDTO>
deactivate ":GeographicAreaDTO"

alt if userService.getUserRoleFromToken().equals(ADMIN)
loop

":GeoAreasWebController" ->> ":GeographicAreaDTO": add(linkTo(removeAreaSensor(geoAreaID, areaSensorDTO.getSensorId()))
":GeoAreasWebController" ->> ":GeographicAreaDTO": add(linkTo(deactivateAreaSensor(geoAreaID, areaSensorDTO.getSensorId()))
end
end
":GeoAreasWebController" -->> "Web API": return  new ResponseEntity<>({List<AreaSensorDTO>, HttpStatus.OK)
"Web API" --> "Client": Show Menu with \nSensor List


deactivate "Web API"
@enduml
