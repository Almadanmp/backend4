@startuml
skinparam titleBorderRoundCorner 10
skinparam titleBorderThickness 3
skinparam titleBorderColor indianred
skinparam titleBackgroundColor snow
skinparam FontName quicksand

skinparam actor {
  BorderColor indianred
  backgroundColor Snow
  }

skinparam sequence {
  LifeLineBackgroundColor indianred
  ParticipantBackgroundColor snow
}

skinparam roundcorner 10

skinparam component {
  arrowThickness 1
  ArrowFontName Verdana
  ArrowColor indianred
  ArrowFontColor darkslategrey
}


title - AUTHORIZATION -

autonumber

actor "Client"

"Client" -> "Web API": Select option Area

activate "Web API"
"Web API" ->> ":SpringResolver":  GET ".../areas/" \n getAllGeographicAreas() \n
activate ":SpringResolver"
":SpringResolver" ->> ":GeoAreasWebController": getAllGeographicAreas() \n
deactivate ":SpringResolver"
activate ":GeoAreasWebController"
":GeoAreasWebController" ->> ":GeographicAreaRepository": getAllDTO() \n
activate ":GeographicAreaRepository"
":GeographicAreaRepository" -->> ":GeoAreasWebController":  return List<GeographicAreaDTO> \n
deactivate ":GeographicAreaRepository"
deactivate ":GeoAreasWebController"
alt if List<GeographicAreaDTO> is null or empty
":GeoAreasWebController" -->> "Web API": return  new ResponseEntity<>(HttpStatus.BAD_REQUEST)
end


alt if userService.getUserRoleFromToken().equals(ADMIN)
loop

":GeoAreasWebController" ->> ":GeographicAreaDTO": add.link(getChildAreas, sensors, ...)
activate ":GeoAreasWebController"
activate ":GeographicAreaDTO"
":GeographicAreaDTO" -->> ":GeoAreasWebController": return GeographicAreaDTO
deactivate ":GeographicAreaDTO"
deactivate ":GeoAreasWebController"
end
":GeoAreasWebController" -->> "Web API": return  new ResponseEntity<>({GeographicAreaDTO, HttpStatus.OK)
end
"Web API" -> "Web API": Create Buttons
"Web API" --> "Client": Show Area List
deactivate "Web API"

@enduml